diff --git a/node_modules/near-api-js/lib/providers/exponential-backoff.d.ts b/node_modules/near-api-js/lib/providers/exponential-backoff.d.ts
new file mode 100644
index 0000000..8cd1960
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/exponential-backoff.d.ts
@@ -0,0 +1,2 @@
+export declare function exponentialBackoff(startWaitTime: any, retryNumber: any, waitBackoff: any, getResult: any): Promise<any>;
+//# sourceMappingURL=exponential-backoff.d.ts.map
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/exponential-backoff.d.ts.map b/node_modules/near-api-js/lib/providers/exponential-backoff.d.ts.map
new file mode 100644
index 0000000..f7e9ff6
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/exponential-backoff.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"exponential-backoff.d.ts","sourceRoot":"","sources":["../../../src/exponential-backoff.ts"],"names":[],"mappings":"AAAA,wBAAsB,kBAAkB,CAAC,aAAa,KAAA,EAAE,WAAW,KAAA,EAAE,WAAW,KAAA,EAAE,SAAS,KAAA,gBAe1F"}
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/exponential-backoff.js b/node_modules/near-api-js/lib/providers/exponential-backoff.js
new file mode 100644
index 0000000..6bebfa4
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/exponential-backoff.js
@@ -0,0 +1,32 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.exponentialBackoff = void 0;
+function exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {
+    return __awaiter(this, void 0, void 0, function* () {
+        // TODO: jitter?
+        let waitTime = startWaitTime;
+        for (let i = 0; i < retryNumber; i++) {
+            const result = yield getResult();
+            if (result) {
+                return result;
+            }
+            yield sleep(waitTime);
+            waitTime *= waitBackoff;
+        }
+        return null;
+    });
+}
+exports.exponentialBackoff = exponentialBackoff;
+// Sleep given number of millis.
+function sleep(millis) {
+    return new Promise(resolve => setTimeout(resolve, millis));
+}
diff --git a/node_modules/near-api-js/lib/providers/fetch.d.ts b/node_modules/near-api-js/lib/providers/fetch.d.ts
new file mode 100644
index 0000000..13a53d5
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/fetch.d.ts
@@ -0,0 +1,2 @@
+export default function (resource: any, init: any): any;
+//# sourceMappingURL=fetch.d.ts.map
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/fetch.d.ts.map b/node_modules/near-api-js/lib/providers/fetch.d.ts.map
new file mode 100644
index 0000000..4e1fd81
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/fetch.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"fetch.d.ts","sourceRoot":"","sources":["../../../src/fetch.ts"],"names":[],"mappings":"AAeA,MAAM,CAAC,OAAO,WAAW,QAAQ,KAAA,EAAE,IAAI,KAAA,OAKtC"}
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/fetch.js b/node_modules/near-api-js/lib/providers/fetch.js
new file mode 100644
index 0000000..99e90af
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/fetch.js
@@ -0,0 +1,22 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const node_fetch_1 = __importDefault(require("node-fetch"));
+const http_1 = __importDefault(require("http"));
+const https_1 = __importDefault(require("https"));
+const httpAgent = new http_1.default.Agent({ keepAlive: true });
+const httpsAgent = new https_1.default.Agent({ keepAlive: true });
+function agent(_parsedURL) {
+    if (_parsedURL.protocol === 'http:') {
+        return httpAgent;
+    }
+    else {
+        return httpsAgent;
+    }
+}
+function default_1(resource, init) {
+    return (0, node_fetch_1.default)(resource, Object.assign({ agent: agent(new URL(resource.toString())) }, init));
+}
+exports.default = default_1;
diff --git a/node_modules/near-api-js/lib/providers/fetch_json.d.ts b/node_modules/near-api-js/lib/providers/fetch_json.d.ts
new file mode 100644
index 0000000..a465214
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/fetch_json.d.ts
@@ -0,0 +1,18 @@
+export interface ConnectionInfo {
+    url: string;
+    user?: string;
+    password?: string;
+    allowInsecure?: boolean;
+    timeout?: number;
+    headers?: {
+        [key: string]: string | number;
+    };
+}
+/**
+ * Performs an HTTP request to a specified URL or connection and returns the parsed JSON response.
+ * @param connectionInfoOrUrl The connection information or URL for the HTTP request.
+ * @param json The JSON payload to be included in the request body for POST requests.
+ * @returns A Promise that resolves to the parsed JSON response from the HTTP request.
+ */
+export declare function fetchJson(connectionInfoOrUrl: string | ConnectionInfo, json?: string): Promise<any>;
+//# sourceMappingURL=fetch_json.d.ts.map
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/fetch_json.d.ts.map b/node_modules/near-api-js/lib/providers/fetch_json.d.ts.map
new file mode 100644
index 0000000..16b0fed
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/fetch_json.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"fetch_json.d.ts","sourceRoot":"","sources":["../../../src/fetch_json.ts"],"names":[],"mappings":"AAUA,MAAM,WAAW,cAAc;IAC3B,GAAG,EAAE,MAAM,CAAC;IACZ,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,aAAa,CAAC,EAAE,OAAO,CAAC;IACxB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,OAAO,CAAC,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAA;KAAE,CAAC;CAChD;AAED;;;;;GAKG;AACH,wBAAsB,SAAS,CAAC,mBAAmB,EAAE,MAAM,GAAG,cAAc,EAAE,IAAI,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAuCzG"}
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/fetch_json.js b/node_modules/near-api-js/lib/providers/fetch_json.js
new file mode 100644
index 0000000..5dec0d1
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/fetch_json.js
@@ -0,0 +1,96 @@
+"use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    var desc = Object.getOwnPropertyDescriptor(m, k);
+    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+      desc = { enumerable: true, get: function() { return m[k]; } };
+    }
+    Object.defineProperty(o, k2, desc);
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
+var __importStar = (this && this.__importStar) || function (mod) {
+    if (mod && mod.__esModule) return mod;
+    var result = {};
+    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
+    return result;
+};
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.fetchJson = void 0;
+const types_1 = require("@near-js/types");
+const utils_1 = require("@near-js/utils");
+const http_errors_1 = __importDefault(require("http-errors"));
+const exponential_backoff_1 = require("./exponential-backoff");
+const START_WAIT_TIME_MS = 1000;
+const BACKOFF_MULTIPLIER = 1.5;
+const RETRY_NUMBER = 10;
+/**
+ * Performs an HTTP request to a specified URL or connection and returns the parsed JSON response.
+ * @param connectionInfoOrUrl The connection information or URL for the HTTP request.
+ * @param json The JSON payload to be included in the request body for POST requests.
+ * @returns A Promise that resolves to the parsed JSON response from the HTTP request.
+ */
+function fetchJson(connectionInfoOrUrl, json) {
+    return __awaiter(this, void 0, void 0, function* () {
+        let connectionInfo = { url: null };
+        if (typeof (connectionInfoOrUrl) === 'string') {
+            connectionInfo.url = connectionInfoOrUrl;
+        }
+        else {
+            connectionInfo = connectionInfoOrUrl;
+        }
+        const response = yield (0, exponential_backoff_1.exponentialBackoff)(START_WAIT_TIME_MS, RETRY_NUMBER, BACKOFF_MULTIPLIER, () => __awaiter(this, void 0, void 0, function* () {
+            var _a;
+            try {
+                const response = yield ((_a = global.fetch) !== null && _a !== void 0 ? _a : (yield Promise.resolve().then(() => __importStar(require('./fetch')))).default)(connectionInfo.url, {
+                    method: json ? 'POST' : 'GET',
+                    body: json ? json : undefined,
+                    headers: Object.assign(Object.assign({}, connectionInfo.headers), { 'Content-Type': 'application/json' })
+                });
+                if (!response.ok) {
+                    if (response.status === 503) {
+                        utils_1.Logger.warn(`Retrying HTTP request for ${connectionInfo.url} as it's not available now`);
+                        return null;
+                    }
+                    else if (response.status === 408) {
+                        utils_1.Logger.warn(`Retrying HTTP request for ${connectionInfo.url} as the previous connection was unused for some time`);
+                        return null;
+                    }
+                    throw (0, http_errors_1.default)(response.status, yield response.text());
+                }
+                return response;
+            }
+            catch (error) {
+                if (error.toString().includes('FetchError') || error.toString().includes('Failed to fetch')) {
+                    utils_1.Logger.warn(`Retrying HTTP request for ${connectionInfo.url} because of error: ${error}`);
+                    return null;
+                }
+                throw error;
+            }
+        }));
+        if (!response) {
+            throw new types_1.TypedError(`Exceeded ${RETRY_NUMBER} attempts for ${connectionInfo.url}.`, 'RetriesExceeded');
+        }
+        return yield response.json();
+    });
+}
+exports.fetchJson = fetchJson;
diff --git a/node_modules/near-api-js/lib/providers/index.d.ts b/node_modules/near-api-js/lib/providers/index.d.ts
index 0411077..3a1ceb0 100644
--- a/node_modules/near-api-js/lib/providers/index.d.ts
+++ b/node_modules/near-api-js/lib/providers/index.d.ts
@@ -1,4 +1,5 @@
-/** @hidden @module */
-import { Provider, FinalExecutionOutcome, ExecutionOutcomeWithId, getTransactionLastResult, FinalExecutionStatus, FinalExecutionStatusBasic } from './provider';
-import { JsonRpcProvider, TypedError, ErrorContext } from './json-rpc-provider';
-export { Provider, FinalExecutionOutcome, JsonRpcProvider, ExecutionOutcomeWithId, FinalExecutionStatus, FinalExecutionStatusBasic, getTransactionLastResult, TypedError, ErrorContext };
+export { exponentialBackoff } from './exponential-backoff';
+export { JsonRpcProvider } from './json-rpc-provider';
+export { Provider } from './provider';
+export { fetchJson } from './fetch_json';
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/index.d.ts.map b/node_modules/near-api-js/lib/providers/index.d.ts.map
new file mode 100644
index 0000000..0af8532
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAC3D,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC"}
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/index.js b/node_modules/near-api-js/lib/providers/index.js
index eaebbc5..afabecd 100644
--- a/node_modules/near-api-js/lib/providers/index.js
+++ b/node_modules/near-api-js/lib/providers/index.js
@@ -1,12 +1,11 @@
 "use strict";
-/** @hidden @module */
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.ErrorContext = exports.TypedError = exports.getTransactionLastResult = exports.FinalExecutionStatusBasic = exports.JsonRpcProvider = exports.Provider = void 0;
-const provider_1 = require("./provider");
-Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return provider_1.Provider; } });
-Object.defineProperty(exports, "getTransactionLastResult", { enumerable: true, get: function () { return provider_1.getTransactionLastResult; } });
-Object.defineProperty(exports, "FinalExecutionStatusBasic", { enumerable: true, get: function () { return provider_1.FinalExecutionStatusBasic; } });
-const json_rpc_provider_1 = require("./json-rpc-provider");
+exports.fetchJson = exports.Provider = exports.JsonRpcProvider = exports.exponentialBackoff = void 0;
+var exponential_backoff_1 = require("./exponential-backoff");
+Object.defineProperty(exports, "exponentialBackoff", { enumerable: true, get: function () { return exponential_backoff_1.exponentialBackoff; } });
+var json_rpc_provider_1 = require("./json-rpc-provider");
 Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcProvider; } });
-Object.defineProperty(exports, "TypedError", { enumerable: true, get: function () { return json_rpc_provider_1.TypedError; } });
-Object.defineProperty(exports, "ErrorContext", { enumerable: true, get: function () { return json_rpc_provider_1.ErrorContext; } });
+var provider_1 = require("./provider");
+Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return provider_1.Provider; } });
+var fetch_json_1 = require("./fetch_json");
+Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function () { return fetch_json_1.fetchJson; } });
diff --git a/node_modules/near-api-js/lib/providers/json-rpc-provider.d.ts b/node_modules/near-api-js/lib/providers/json-rpc-provider.d.ts
index d18c08e..0057c25 100644
--- a/node_modules/near-api-js/lib/providers/json-rpc-provider.d.ts
+++ b/node_modules/near-api-js/lib/providers/json-rpc-provider.d.ts
@@ -1,2 +1,171 @@
-export { ErrorContext, TypedError } from '@near-js/types';
-export { JsonRpcProvider } from '@near-js/providers';
+import { AccessKeyWithPublicKey, BlockId, BlockReference, BlockResult, BlockChangeResult, ChangeResult, ChunkId, ChunkResult, EpochValidatorInfo, GasPrice, LightClientProof, LightClientProofRequest, NextLightClientBlockRequest, NextLightClientBlockResponse, NearProtocolConfig, NodeStatusResult, QueryResponseKind } from '@near-js/types';
+import { SignedTransaction } from '@near-js/transactions';
+import { Provider } from './provider';
+import { ConnectionInfo } from './fetch_json';
+import { TxOutcome } from '../../types/src/provider/response';
+import { TxExecutionStatus } from '@near-js/types/src/provider/protocol';
+/**
+ * Client class to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).
+ * @see [https://github.com/near/nearcore/tree/master/chain/jsonrpc](https://github.com/near/nearcore/tree/master/chain/jsonrpc)
+ */
+export declare class JsonRpcProvider extends Provider {
+    /** @hidden */
+    readonly connection: ConnectionInfo;
+    /**
+     * @param connectionInfo Connection info
+     */
+    constructor(connectionInfo: ConnectionInfo);
+    /**
+     * Gets the RPC's status
+     * @see [https://docs.near.org/docs/develop/front-end/rpc#general-validator-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
+     */
+    status(): Promise<NodeStatusResult>;
+    /**
+     * Sends a signed transaction to the RPC
+     *
+     * @param signedTransaction The signed transaction being sent
+     * @param waitUntil
+     */
+    sendTransactionUntil(signedTransaction: SignedTransaction, waitUntil: TxExecutionStatus): Promise<TxOutcome>;
+    /**
+     * Sends a signed transaction to the RPC and waits until transaction is fully complete
+     * @see [https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
+     *
+     * @param signedTransaction The signed transaction being sent
+     */
+    sendTransaction(signedTransaction: SignedTransaction): Promise<TxOutcome>;
+    /**
+     * Sends a signed transaction to the RPC and immediately returns transaction hash
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)
+     * @param signedTransaction The signed transaction being sent
+     * @returns {Promise<TxOutcome>}
+     */
+    sendTransactionAsync(signedTransaction: SignedTransaction): Promise<TxOutcome>;
+    /**
+     * Gets a transaction's status from the RPC
+     * @see [https://docs.near.org/docs/develop/front-end/rpc#transaction-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
+     *
+     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string
+     * @param accountId The NEAR account that signed the transaction
+     * @param waitUntil
+     */
+    txStatus(txHash: Uint8Array | string, accountId: string, waitUntil?: TxExecutionStatus): Promise<TxOutcome>;
+    private txStatusUint8Array;
+    private txStatusString;
+    /**
+     * Gets a transaction's status from the RPC with receipts
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)
+     * @param txHash The hash of the transaction
+     * @param accountId The NEAR account that signed the transaction
+     * @param waitUntil
+     * @returns {Promise<TxOutcome>}
+     */
+    txStatusReceipts(txHash: Uint8Array | string, accountId: string, waitUntil?: TxExecutionStatus): Promise<TxOutcome>;
+    /**
+     * Query the RPC by passing an {@link "@near-js/types".provider/request.RpcQueryRequest | RpcQueryRequest }
+     * @see [https://docs.near.org/api/rpc/contracts](https://docs.near.org/api/rpc/contracts)
+     *
+     * @typeParam T the shape of the returned query response
+     */
+    query<T extends QueryResponseKind>(...args: any[]): Promise<T>;
+    /**
+     * Query for block info from the RPC
+     * pass block_id OR finality as blockQuery, not both
+     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)
+     *
+     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)
+     */
+    block(blockQuery: BlockId | BlockReference): Promise<BlockResult>;
+    /**
+     * Query changes in block from the RPC
+     * pass block_id OR finality as blockQuery, not both
+     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)
+     */
+    blockChanges(blockQuery: BlockReference): Promise<BlockChangeResult>;
+    /**
+     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block
+     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)
+     *
+     * @param chunkId Hash of a chunk ID or shard ID
+     */
+    chunk(chunkId: ChunkId): Promise<ChunkResult>;
+    /**
+     * Query validators of the epoch defined by the given block id.
+     * @see [https://docs.near.org/api/rpc/network#validation-status](https://docs.near.org/api/rpc/network#validation-status)
+     *
+     * @param blockId Block hash or height, or null for latest.
+     */
+    validators(blockId: BlockId | null): Promise<EpochValidatorInfo>;
+    /**
+     * Gets the protocol config at a block from RPC
+     *
+     * @param blockReference specifies the block to get the protocol config for
+     */
+    experimental_protocolConfig(blockReference: BlockReference | {
+        sync_checkpoint: 'genesis';
+    }): Promise<NearProtocolConfig>;
+    /**
+     * Gets a light client execution proof for verifying execution outcomes
+     * @see [https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof](https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)
+     */
+    lightClientProof(request: LightClientProofRequest): Promise<LightClientProof>;
+    /**
+     * Returns the next light client block as far in the future as possible from the last known hash
+     * to still be able to validate from that hash. This will either return the last block of the
+     * next epoch, or the last final known block.
+     *
+     * @see [https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block](https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block)
+     */
+    nextLightClientBlock(request: NextLightClientBlockRequest): Promise<NextLightClientBlockResponse>;
+    /**
+     * Gets access key changes for a given array of accountIds
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)
+     * @returns {Promise<ChangeResult>}
+     */
+    accessKeyChanges(accountIdArray: string[], blockQuery: BlockReference): Promise<ChangeResult>;
+    /**
+     * Gets single access key changes for a given array of access keys
+     * pass block_id OR finality as blockQuery, not both
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)
+     * @returns {Promise<ChangeResult>}
+     */
+    singleAccessKeyChanges(accessKeyArray: AccessKeyWithPublicKey[], blockQuery: BlockReference): Promise<ChangeResult>;
+    /**
+     * Gets account changes for a given array of accountIds
+     * pass block_id OR finality as blockQuery, not both
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)
+     * @returns {Promise<ChangeResult>}
+     */
+    accountChanges(accountIdArray: string[], blockQuery: BlockReference): Promise<ChangeResult>;
+    /**
+     * Gets contract state changes for a given array of accountIds
+     * pass block_id OR finality as blockQuery, not both
+     * Note: If you pass a keyPrefix it must be base64 encoded
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)
+     * @returns {Promise<ChangeResult>}
+     */
+    contractStateChanges(accountIdArray: string[], blockQuery: BlockReference, keyPrefix?: string): Promise<ChangeResult>;
+    /**
+     * Gets contract code changes for a given array of accountIds
+     * pass block_id OR finality as blockQuery, not both
+     * Note: Change is returned in a base64 encoded WASM file
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)
+     * @returns {Promise<ChangeResult>}
+     */
+    contractCodeChanges(accountIdArray: string[], blockQuery: BlockReference): Promise<ChangeResult>;
+    /**
+     * Returns gas price for a specific block_height or block_hash.
+     * @see [https://docs.near.org/api/rpc/gas](https://docs.near.org/api/rpc/gas)
+     *
+     * @param blockId Block hash or height, or null for latest.
+     */
+    gasPrice(blockId: BlockId | null): Promise<GasPrice>;
+    /**
+     * Directly call the RPC specifying the method and params
+     *
+     * @param method RPC method
+     * @param params Parameters to the method
+     */
+    sendJsonRpc<T>(method: string, params: object): Promise<T>;
+}
+//# sourceMappingURL=json-rpc-provider.d.ts.map
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/json-rpc-provider.d.ts.map b/node_modules/near-api-js/lib/providers/json-rpc-provider.d.ts.map
new file mode 100644
index 0000000..8214af1
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/json-rpc-provider.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"json-rpc-provider.d.ts","sourceRoot":"","sources":["../../../src/json-rpc-provider.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/json-rpc-provider.js b/node_modules/near-api-js/lib/providers/json-rpc-provider.js
index e3e2d82..9b8ec7f 100644
--- a/node_modules/near-api-js/lib/providers/json-rpc-provider.js
+++ b/node_modules/near-api-js/lib/providers/json-rpc-provider.js
@@ -1,8 +1,425 @@
 "use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
+            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
+                t[p[i]] = s[p[i]];
+        }
+    return t;
+};
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.JsonRpcProvider = exports.TypedError = exports.ErrorContext = void 0;
-var types_1 = require("@near-js/types");
-Object.defineProperty(exports, "ErrorContext", { enumerable: true, get: function () { return types_1.ErrorContext; } });
-Object.defineProperty(exports, "TypedError", { enumerable: true, get: function () { return types_1.TypedError; } });
-var providers_1 = require("@near-js/providers");
-Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return providers_1.JsonRpcProvider; } });
+exports.JsonRpcProvider = void 0;
+/**
+ * @module
+ * @description
+ * This module contains the {@link JsonRpcProvider} client class
+ * which can be used to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).
+ * @see {@link "@near-js/types".provider | provider} for a list of request and response types
+ */
+const utils_1 = require("@near-js/utils");
+const types_1 = require("@near-js/types");
+const transactions_1 = require("@near-js/transactions");
+const exponential_backoff_1 = require("./exponential-backoff");
+const provider_1 = require("./provider");
+const fetch_json_1 = require("./fetch_json");
+/** @hidden */
+// Default number of retries before giving up on a request.
+const REQUEST_RETRY_NUMBER = 12;
+// Default wait until next retry in millis.
+const REQUEST_RETRY_WAIT = 500;
+// Exponential back off for waiting to retry.
+const REQUEST_RETRY_WAIT_BACKOFF = 1.5;
+/// Keep ids unique across all connections.
+let _nextId = 123;
+/**
+ * Client class to interact with the [NEAR RPC API](https://docs.near.org/api/rpc/introduction).
+ * @see [https://github.com/near/nearcore/tree/master/chain/jsonrpc](https://github.com/near/nearcore/tree/master/chain/jsonrpc)
+ */
+class JsonRpcProvider extends provider_1.Provider {
+    /**
+     * @param connectionInfo Connection info
+     */
+    constructor(connectionInfo) {
+        super();
+        this.connection = connectionInfo || { url: '' };
+    }
+    /**
+     * Gets the RPC's status
+     * @see [https://docs.near.org/docs/develop/front-end/rpc#general-validator-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
+     */
+    status() {
+        return __awaiter(this, void 0, void 0, function* () {
+            return this.sendJsonRpc('status', []);
+        });
+    }
+    /**
+     * Sends a signed transaction to the RPC
+     *
+     * @param signedTransaction The signed transaction being sent
+     * @param waitUntil
+     */
+    sendTransactionUntil(signedTransaction, waitUntil) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const bytes = (0, transactions_1.encodeTransaction)(signedTransaction);
+            return this.sendJsonRpc('send_tx', { signed_transaction: Buffer.from(bytes).toString('base64'), wait_until: waitUntil });
+        });
+    }
+    /**
+     * Sends a signed transaction to the RPC and waits until transaction is fully complete
+     * @see [https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
+     *
+     * @param signedTransaction The signed transaction being sent
+     */
+    sendTransaction(signedTransaction) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return this.sendTransactionUntil(signedTransaction, 'Final');
+        });
+    }
+    /**
+     * Sends a signed transaction to the RPC and immediately returns transaction hash
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)
+     * @param signedTransaction The signed transaction being sent
+     * @returns {Promise<TxOutcome>}
+     */
+    sendTransactionAsync(signedTransaction) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return this.sendTransactionUntil(signedTransaction, 'None');
+        });
+    }
+    /**
+     * Gets a transaction's status from the RPC
+     * @see [https://docs.near.org/docs/develop/front-end/rpc#transaction-status](https://docs.near.org/docs/develop/front-end/rpc#general-validator-status)
+     *
+     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string
+     * @param accountId The NEAR account that signed the transaction
+     * @param waitUntil
+     */
+    txStatus(txHash, accountId, waitUntil = 'Final') {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (typeof txHash === 'string') {
+                return this.txStatusString(txHash, accountId, waitUntil);
+            }
+            else {
+                return this.txStatusUint8Array(txHash, accountId, waitUntil);
+            }
+        });
+    }
+    txStatusUint8Array(txHash, accountId, waitUntil) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return this.sendJsonRpc('tx', { tx_hash: (0, utils_1.baseEncode)(txHash), sender_account_id: accountId, wait_until: waitUntil });
+        });
+    }
+    txStatusString(txHash, accountId, waitUntil) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return this.sendJsonRpc('tx', { tx_hash: txHash, sender_account_id: accountId, wait_until: waitUntil });
+        });
+    }
+    /**
+     * Gets a transaction's status from the RPC with receipts
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)
+     * @param txHash The hash of the transaction
+     * @param accountId The NEAR account that signed the transaction
+     * @param waitUntil
+     * @returns {Promise<TxOutcome>}
+     */
+    txStatusReceipts(txHash, accountId, waitUntil = 'Final') {
+        return __awaiter(this, void 0, void 0, function* () {
+            if (typeof txHash === 'string') {
+                return this.sendJsonRpc('EXPERIMENTAL_tx_status', { tx_hash: txHash, sender_account_id: accountId, wait_until: waitUntil });
+            }
+            else {
+                return this.sendJsonRpc('EXPERIMENTAL_tx_status', { tx_hash: (0, utils_1.baseEncode)(txHash), sender_account_id: accountId, wait_until: waitUntil });
+            }
+        });
+    }
+    /**
+     * Query the RPC by passing an {@link "@near-js/types".provider/request.RpcQueryRequest | RpcQueryRequest }
+     * @see [https://docs.near.org/api/rpc/contracts](https://docs.near.org/api/rpc/contracts)
+     *
+     * @typeParam T the shape of the returned query response
+     */
+    query(...args) {
+        return __awaiter(this, void 0, void 0, function* () {
+            let result;
+            if (args.length === 1) {
+                const _a = args[0], { block_id, blockId } = _a, otherParams = __rest(_a, ["block_id", "blockId"]);
+                result = yield this.sendJsonRpc('query', Object.assign(Object.assign({}, otherParams), { block_id: block_id || blockId }));
+            }
+            else {
+                const [path, data] = args;
+                result = yield this.sendJsonRpc('query', [path, data]);
+            }
+            if (result && result.error) {
+                throw new types_1.TypedError(`Querying failed: ${result.error}.\n${JSON.stringify(result, null, 2)}`, (0, utils_1.getErrorTypeFromErrorMessage)(result.error, result.error.name));
+            }
+            return result;
+        });
+    }
+    /**
+     * Query for block info from the RPC
+     * pass block_id OR finality as blockQuery, not both
+     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)
+     *
+     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)
+     */
+    block(blockQuery) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { finality } = blockQuery;
+            const { blockId } = blockQuery;
+            return this.sendJsonRpc('block', { block_id: blockId, finality });
+        });
+    }
+    /**
+     * Query changes in block from the RPC
+     * pass block_id OR finality as blockQuery, not both
+     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)
+     */
+    blockChanges(blockQuery) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { finality } = blockQuery;
+            const { blockId } = blockQuery;
+            return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });
+        });
+    }
+    /**
+     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block
+     * @see [https://docs.near.org/api/rpc/block-chunk](https://docs.near.org/api/rpc/block-chunk)
+     *
+     * @param chunkId Hash of a chunk ID or shard ID
+     */
+    chunk(chunkId) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return this.sendJsonRpc('chunk', [chunkId]);
+        });
+    }
+    /**
+     * Query validators of the epoch defined by the given block id.
+     * @see [https://docs.near.org/api/rpc/network#validation-status](https://docs.near.org/api/rpc/network#validation-status)
+     *
+     * @param blockId Block hash or height, or null for latest.
+     */
+    validators(blockId) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return this.sendJsonRpc('validators', [blockId]);
+        });
+    }
+    /**
+     * Gets the protocol config at a block from RPC
+     *
+     * @param blockReference specifies the block to get the protocol config for
+     */
+    experimental_protocolConfig(blockReference) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const _a = blockReference, { blockId } = _a, otherParams = __rest(_a, ["blockId"]);
+            return yield this.sendJsonRpc('EXPERIMENTAL_protocol_config', Object.assign(Object.assign({}, otherParams), { block_id: blockId }));
+        });
+    }
+    /**
+     * Gets a light client execution proof for verifying execution outcomes
+     * @see [https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof](https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof)
+     */
+    lightClientProof(request) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return yield this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);
+        });
+    }
+    /**
+     * Returns the next light client block as far in the future as possible from the last known hash
+     * to still be able to validate from that hash. This will either return the last block of the
+     * next epoch, or the last final known block.
+     *
+     * @see [https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block](https://github.com/near/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-block)
+     */
+    nextLightClientBlock(request) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return yield this.sendJsonRpc('next_light_client_block', request);
+        });
+    }
+    /**
+     * Gets access key changes for a given array of accountIds
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)
+     * @returns {Promise<ChangeResult>}
+     */
+    accessKeyChanges(accountIdArray, blockQuery) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { finality } = blockQuery;
+            const { blockId } = blockQuery;
+            return this.sendJsonRpc('EXPERIMENTAL_changes', {
+                changes_type: 'all_access_key_changes',
+                account_ids: accountIdArray,
+                block_id: blockId,
+                finality
+            });
+        });
+    }
+    /**
+     * Gets single access key changes for a given array of access keys
+     * pass block_id OR finality as blockQuery, not both
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)
+     * @returns {Promise<ChangeResult>}
+     */
+    singleAccessKeyChanges(accessKeyArray, blockQuery) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { finality } = blockQuery;
+            const { blockId } = blockQuery;
+            return this.sendJsonRpc('EXPERIMENTAL_changes', {
+                changes_type: 'single_access_key_changes',
+                keys: accessKeyArray,
+                block_id: blockId,
+                finality
+            });
+        });
+    }
+    /**
+     * Gets account changes for a given array of accountIds
+     * pass block_id OR finality as blockQuery, not both
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)
+     * @returns {Promise<ChangeResult>}
+     */
+    accountChanges(accountIdArray, blockQuery) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { finality } = blockQuery;
+            const { blockId } = blockQuery;
+            return this.sendJsonRpc('EXPERIMENTAL_changes', {
+                changes_type: 'account_changes',
+                account_ids: accountIdArray,
+                block_id: blockId,
+                finality
+            });
+        });
+    }
+    /**
+     * Gets contract state changes for a given array of accountIds
+     * pass block_id OR finality as blockQuery, not both
+     * Note: If you pass a keyPrefix it must be base64 encoded
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)
+     * @returns {Promise<ChangeResult>}
+     */
+    contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { finality } = blockQuery;
+            const { blockId } = blockQuery;
+            return this.sendJsonRpc('EXPERIMENTAL_changes', {
+                changes_type: 'data_changes',
+                account_ids: accountIdArray,
+                key_prefix_base64: keyPrefix,
+                block_id: blockId,
+                finality
+            });
+        });
+    }
+    /**
+     * Gets contract code changes for a given array of accountIds
+     * pass block_id OR finality as blockQuery, not both
+     * Note: Change is returned in a base64 encoded WASM file
+     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)
+     * @returns {Promise<ChangeResult>}
+     */
+    contractCodeChanges(accountIdArray, blockQuery) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { finality } = blockQuery;
+            const { blockId } = blockQuery;
+            return this.sendJsonRpc('EXPERIMENTAL_changes', {
+                changes_type: 'contract_code_changes',
+                account_ids: accountIdArray,
+                block_id: blockId,
+                finality
+            });
+        });
+    }
+    /**
+     * Returns gas price for a specific block_height or block_hash.
+     * @see [https://docs.near.org/api/rpc/gas](https://docs.near.org/api/rpc/gas)
+     *
+     * @param blockId Block hash or height, or null for latest.
+     */
+    gasPrice(blockId) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return yield this.sendJsonRpc('gas_price', [blockId]);
+        });
+    }
+    /**
+     * Directly call the RPC specifying the method and params
+     *
+     * @param method RPC method
+     * @param params Parameters to the method
+     */
+    sendJsonRpc(method, params) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const response = yield (0, exponential_backoff_1.exponentialBackoff)(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, () => __awaiter(this, void 0, void 0, function* () {
+                var _a;
+                try {
+                    const request = {
+                        method,
+                        params,
+                        id: (_nextId++),
+                        jsonrpc: '2.0'
+                    };
+                    console.log('request', request);
+                    const response = yield (0, fetch_json_1.fetchJson)(this.connection, JSON.stringify(request));
+                    console.log('response', response);
+                    if (response.error) {
+                        if (typeof response.error.data === 'object') {
+                            if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {
+                                // if error data has error_message and error_type properties, we consider that node returned an error in the old format
+                                throw new types_1.TypedError(response.error.data.error_message, response.error.data.error_type);
+                            }
+                            throw (0, utils_1.parseRpcError)(response.error.data);
+                        }
+                        else {
+                            const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;
+                            // NOTE: All this hackery is happening because structured errors not implemented
+                            // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved
+                            if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')
+                                || errorMessage.includes('query has timed out')) {
+                                throw new types_1.TypedError(errorMessage, 'TimeoutError');
+                            }
+                            const errorType = (0, utils_1.getErrorTypeFromErrorMessage)(response.error.data, '');
+                            if (errorType) {
+                                throw new types_1.TypedError((0, utils_1.formatError)(errorType, params), errorType);
+                            }
+                            throw new types_1.TypedError(errorMessage, response.error.name);
+                        }
+                    }
+                    else if (typeof ((_a = response.result) === null || _a === void 0 ? void 0 : _a.error) === 'string') {
+                        const errorType = (0, utils_1.getErrorTypeFromErrorMessage)(response.result.error, '');
+                        if (errorType) {
+                            throw new utils_1.ServerError((0, utils_1.formatError)(errorType, params), errorType);
+                        }
+                    }
+                    // Success when response.error is not exist
+                    return response;
+                }
+                catch (error) {
+                    if (error.type === 'TimeoutError') {
+                        utils_1.Logger.warn(`Retrying request to ${method} as it has timed out`, params);
+                        return null;
+                    }
+                    throw error;
+                }
+            }));
+            const { result } = response;
+            // From jsonrpc spec:
+            // result
+            //   This member is REQUIRED on success.
+            //   This member MUST NOT exist if there was an error invoking the method.
+            if (typeof result === 'undefined') {
+                throw new types_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');
+            }
+            return result;
+        });
+    }
+}
+exports.JsonRpcProvider = JsonRpcProvider;
diff --git a/node_modules/near-api-js/lib/providers/protocol.d.ts b/node_modules/near-api-js/lib/providers/protocol.d.ts
new file mode 100644
index 0000000..de33037
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/protocol.d.ts
@@ -0,0 +1,176 @@
+/**
+ * NEAR RPC API request types and responses
+ * @module
+ */
+import BN from 'bn.js';
+export interface SyncInfo {
+    latest_block_hash: string;
+    latest_block_height: number;
+    latest_block_time: string;
+    latest_state_root: string;
+    syncing: boolean;
+}
+interface Version {
+    version: string;
+    build: string;
+}
+export interface NodeStatusResult {
+    chain_id: string;
+    rpc_addr: string;
+    sync_info: SyncInfo;
+    validators: string[];
+    version: Version;
+}
+export type BlockHash = string;
+export type BlockHeight = number;
+export type BlockId = BlockHash | BlockHeight;
+export type Finality = 'optimistic' | 'near-final' | 'final';
+export type TxExecutionStatus = 'None' | 'Included' | 'IncludedFinal' | 'Executed' | 'Final';
+export type BlockReference = {
+    blockId: BlockId;
+} | {
+    finality: Finality;
+} | {
+    sync_checkpoint: 'genesis' | 'earliest_available';
+};
+export interface TotalWeight {
+    num: number;
+}
+export interface BlockHeader {
+    height: number;
+    epoch_id: string;
+    next_epoch_id: string;
+    hash: string;
+    prev_hash: string;
+    prev_state_root: string;
+    chunk_receipts_root: string;
+    chunk_headers_root: string;
+    chunk_tx_root: string;
+    outcome_root: string;
+    chunks_included: number;
+    challenges_root: string;
+    timestamp: number;
+    timestamp_nanosec: string;
+    random_value: string;
+    validator_proposals: any[];
+    chunk_mask: boolean[];
+    gas_price: string;
+    rent_paid: string;
+    validator_reward: string;
+    total_supply: string;
+    challenges_result: any[];
+    last_final_block: string;
+    last_ds_final_block: string;
+    next_bp_hash: string;
+    block_merkle_root: string;
+    approvals: string[];
+    signature: string;
+    latest_protocol_version: number;
+}
+export type ChunkHash = string;
+export type ShardId = number;
+export type BlockShardId = [BlockId, ShardId];
+export type ChunkId = ChunkHash | BlockShardId;
+export interface ChunkHeader {
+    balance_burnt: string;
+    chunk_hash: ChunkHash;
+    encoded_length: number;
+    encoded_merkle_root: string;
+    gas_limit: number;
+    gas_used: number;
+    height_created: number;
+    height_included: number;
+    outcome_root: string;
+    outgoing_receipts_root: string;
+    prev_block_hash: string;
+    prev_state_root: string;
+    rent_paid: string;
+    shard_id: number;
+    signature: string;
+    tx_root: string;
+    validator_proposals: any[];
+    validator_reward: string;
+}
+export interface ChunkResult {
+    author: string;
+    header: ChunkHeader;
+    receipts: any[];
+    transactions: Transaction[];
+}
+export interface Chunk {
+    chunk_hash: string;
+    prev_block_hash: string;
+    outcome_root: string;
+    prev_state_root: string;
+    encoded_merkle_root: string;
+    encoded_length: number;
+    height_created: number;
+    height_included: number;
+    shard_id: number;
+    gas_used: number;
+    gas_limit: number;
+    rent_paid: string;
+    validator_reward: string;
+    balance_burnt: string;
+    outgoing_receipts_root: string;
+    tx_root: string;
+    validator_proposals: any[];
+    signature: string;
+}
+export interface Transaction {
+    actions: Array<any>;
+    hash: string;
+    nonce: BN;
+    public_key: string;
+    receiver_id: string;
+    signature: string;
+    signer_id: string;
+}
+export interface BlockResult {
+    author: string;
+    header: BlockHeader;
+    chunks: Chunk[];
+}
+export interface BlockChange {
+    type: string;
+    account_id: string;
+}
+export interface BlockChangeResult {
+    block_hash: string;
+    changes: BlockChange[];
+}
+export interface ChangeResult {
+    block_hash: string;
+    changes: any[];
+}
+export interface NearProtocolConfig {
+    runtime_config: NearProtocolRuntimeConfig;
+}
+export interface NearProtocolRuntimeConfig {
+    storage_amount_per_byte: string;
+}
+export interface MerkleNode {
+    hash: string;
+    direction: string;
+}
+export type MerklePath = MerkleNode[];
+export interface BlockHeaderInnerLiteView {
+    height: number;
+    epoch_id: string;
+    next_epoch_id: string;
+    prev_state_root: string;
+    outcome_root: string;
+    timestamp: number;
+    timestamp_nanosec: string;
+    next_bp_hash: string;
+    block_merkle_root: string;
+}
+export interface GasPrice {
+    gas_price: string;
+}
+export interface AccessKeyWithPublicKey {
+    account_id: string;
+    public_key: string;
+}
+export {};
+//# sourceMappingURL=protocol.d.ts.map
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/protocol.d.ts.map b/node_modules/near-api-js/lib/providers/protocol.d.ts.map
new file mode 100644
index 0000000..71eb049
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/protocol.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"protocol.d.ts","sourceRoot":"","sources":["../../../../../types/src/provider/protocol.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/protocol.js b/node_modules/near-api-js/lib/providers/protocol.js
new file mode 100644
index 0000000..ea4cc4a
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/protocol.js
@@ -0,0 +1,6 @@
+"use strict";
+/**
+ * NEAR RPC API request types and responses
+ * @module
+ */
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/near-api-js/lib/providers/provider.d.ts b/node_modules/near-api-js/lib/providers/provider.d.ts
index 60f4250..6ed6743 100644
--- a/node_modules/near-api-js/lib/providers/provider.d.ts
+++ b/node_modules/near-api-js/lib/providers/provider.d.ts
@@ -1,3 +1,33 @@
-export { getTransactionLastResult } from '@near-js/utils';
-export { Provider } from '@near-js/providers';
-export { IdType, LightClientBlockLiteView, LightClientProof, LightClientProofRequest, NextLightClientBlockRequest, NextLightClientBlockResponse, AccessKeyWithPublicKey, BlockHash, BlockChange, BlockChangeResult, BlockHeader, BlockHeaderInnerLiteView, BlockHeight, BlockId, BlockReference, BlockResult, BlockShardId, ChangeResult, Chunk, ChunkHash, ChunkHeader, ChunkId, ChunkResult, Finality, GasPrice, MerkleNode, MerklePath, NearProtocolConfig, NearProtocolRuntimeConfig, NodeStatusResult, ShardId, SyncInfo, TotalWeight, ProviderTransaction as Transaction, CallFunctionRequest, RpcQueryRequest, ViewAccessKeyListRequest, ViewAccessKeyRequest, ViewAccountRequest, ViewCodeRequest, ViewStateRequest, AccessKeyInfoView, AccessKeyList, AccessKeyView, AccessKeyViewRaw, AccountView, CodeResult, ContractCodeView, ExecutionError, ExecutionOutcome, ExecutionOutcomeWithId, ExecutionOutcomeWithIdView, ExecutionStatus, ExecutionStatusBasic, FinalExecutionOutcome, FinalExecutionStatus, FinalExecutionStatusBasic, FunctionCallPermissionView, QueryResponseKind, ViewStateResult, CurrentEpochValidatorInfo, EpochValidatorInfo, NextEpochValidatorInfo, ValidatorStakeView, } from '@near-js/types';
+/**
+ * NEAR RPC API request types and responses
+ * @module
+ */
+import { SignedTransaction } from '@near-js/transactions';
+import { AccessKeyWithPublicKey, BlockChangeResult, BlockId, BlockReference, BlockResult, ChangeResult, ChunkId, ChunkResult, GasPrice, LightClientProof, LightClientProofRequest, NextLightClientBlockRequest, NextLightClientBlockResponse, NearProtocolConfig, NodeStatusResult, QueryResponseKind, RpcQueryRequest, EpochValidatorInfo } from '@near-js/types';
+import { TxExecutionStatus } from '@near-js/types/src/provider/protocol';
+import { TxOutcome } from '@near-js/types/src/provider/response';
+/** @hidden */
+export declare abstract class Provider {
+    abstract status(): Promise<NodeStatusResult>;
+    abstract sendTransactionUntil(signedTransaction: SignedTransaction, waitUntil: TxExecutionStatus): Promise<TxOutcome>;
+    abstract sendTransaction(signedTransaction: SignedTransaction): Promise<TxOutcome>;
+    abstract sendTransactionAsync(signedTransaction: SignedTransaction): Promise<TxOutcome>;
+    abstract txStatus(txHash: Uint8Array | string, accountId: string, waitUntil: TxExecutionStatus): Promise<TxOutcome>;
+    abstract txStatusReceipts(txHash: Uint8Array | string, accountId: string, waitUntil: TxExecutionStatus): Promise<TxOutcome>;
+    abstract query<T extends QueryResponseKind>(params: RpcQueryRequest): Promise<T>;
+    abstract query<T extends QueryResponseKind>(path: string, data: string): Promise<T>;
+    abstract block(blockQuery: BlockId | BlockReference): Promise<BlockResult>;
+    abstract blockChanges(blockQuery: BlockId | BlockReference): Promise<BlockChangeResult>;
+    abstract chunk(chunkId: ChunkId): Promise<ChunkResult>;
+    abstract validators(blockId: BlockId | null): Promise<EpochValidatorInfo>;
+    abstract experimental_protocolConfig(blockReference: BlockReference): Promise<NearProtocolConfig>;
+    abstract lightClientProof(request: LightClientProofRequest): Promise<LightClientProof>;
+    abstract nextLightClientBlock(request: NextLightClientBlockRequest): Promise<NextLightClientBlockResponse>;
+    abstract gasPrice(blockId: BlockId): Promise<GasPrice>;
+    abstract accessKeyChanges(accountIdArray: string[], BlockQuery: BlockId | BlockReference): Promise<ChangeResult>;
+    abstract singleAccessKeyChanges(accessKeyArray: AccessKeyWithPublicKey[], BlockQuery: BlockId | BlockReference): Promise<ChangeResult>;
+    abstract accountChanges(accountIdArray: string[], BlockQuery: BlockId | BlockReference): Promise<ChangeResult>;
+    abstract contractStateChanges(accountIdArray: string[], BlockQuery: BlockId | BlockReference, keyPrefix: string): Promise<ChangeResult>;
+    abstract contractCodeChanges(accountIdArray: string[], BlockQuery: BlockId | BlockReference): Promise<ChangeResult>;
+}
+//# sourceMappingURL=provider.d.ts.map
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/provider.d.ts.map b/node_modules/near-api-js/lib/providers/provider.d.ts.map
new file mode 100644
index 0000000..baae043
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/provider.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"provider.d.ts","sourceRoot":"","sources":["../../../src/provider.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/provider.js b/node_modules/near-api-js/lib/providers/provider.js
index 8bc0d31..d6c2fd5 100644
--- a/node_modules/near-api-js/lib/providers/provider.js
+++ b/node_modules/near-api-js/lib/providers/provider.js
@@ -1,11 +1,11 @@
 "use strict";
+/**
+ * NEAR RPC API request types and responses
+ * @module
+ */
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.FinalExecutionStatusBasic = exports.ExecutionStatusBasic = exports.IdType = exports.Provider = exports.getTransactionLastResult = void 0;
-var utils_1 = require("@near-js/utils");
-Object.defineProperty(exports, "getTransactionLastResult", { enumerable: true, get: function () { return utils_1.getTransactionLastResult; } });
-var providers_1 = require("@near-js/providers");
-Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return providers_1.Provider; } });
-var types_1 = require("@near-js/types");
-Object.defineProperty(exports, "IdType", { enumerable: true, get: function () { return types_1.IdType; } });
-Object.defineProperty(exports, "ExecutionStatusBasic", { enumerable: true, get: function () { return types_1.ExecutionStatusBasic; } });
-Object.defineProperty(exports, "FinalExecutionStatusBasic", { enumerable: true, get: function () { return types_1.FinalExecutionStatusBasic; } });
+exports.Provider = void 0;
+/** @hidden */
+class Provider {
+}
+exports.Provider = Provider;
diff --git a/node_modules/near-api-js/lib/providers/response.d.ts b/node_modules/near-api-js/lib/providers/response.d.ts
new file mode 100644
index 0000000..98b9df1
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/response.d.ts
@@ -0,0 +1,113 @@
+/**
+ * NEAR RPC API request types and responses
+ * @module
+ */
+import BN from 'bn.js';
+import { BlockHash, BlockHeight, MerklePath, TxExecutionStatus } from './protocol';
+export declare enum ExecutionStatusBasic {
+    Unknown = "Unknown",
+    Pending = "Pending",
+    Failure = "Failure"
+}
+export interface ExecutionStatus {
+    SuccessValue?: string;
+    SuccessReceiptId?: string;
+    Failure?: ExecutionError;
+}
+export declare enum FinalExecutionStatusBasic {
+    NotStarted = "NotStarted",
+    Started = "Started",
+    Failure = "Failure"
+}
+export interface ExecutionError {
+    error_message: string;
+    error_type: string;
+}
+export interface FinalExecutionStatus {
+    SuccessValue?: string;
+    Failure?: ExecutionError;
+}
+export interface ExecutionOutcomeWithId {
+    id: string;
+    outcome: ExecutionOutcome;
+}
+export interface ExecutionOutcome {
+    logs: string[];
+    receipt_ids: string[];
+    gas_burnt: number;
+    tokens_burnt: string;
+    executor_id: string;
+    status: ExecutionStatus | ExecutionStatusBasic;
+}
+export interface ExecutionOutcomeWithIdView {
+    proof: MerklePath;
+    block_hash: string;
+    id: string;
+    outcome: ExecutionOutcome;
+}
+export interface FinalExecutionOutcome {
+    status: FinalExecutionStatus | FinalExecutionStatusBasic;
+    transaction: any;
+    transaction_outcome: ExecutionOutcomeWithId;
+    receipts_outcome: ExecutionOutcomeWithId[];
+}
+export interface TxOutcome {
+    final_execution_outcome: FinalExecutionOutcome;
+    final_execution_status: TxExecutionStatus;
+}
+export interface QueryResponseKind {
+    block_height: BlockHeight;
+    block_hash: BlockHash;
+}
+export interface AccountView extends QueryResponseKind {
+    amount: string;
+    locked: string;
+    code_hash: string;
+    storage_usage: number;
+    storage_paid_at: BlockHeight;
+}
+interface StateItem {
+    key: string;
+    value: string;
+    proof: string[];
+}
+export interface ViewStateResult extends QueryResponseKind {
+    values: StateItem[];
+    proof: string[];
+}
+export interface CodeResult extends QueryResponseKind {
+    result: number[];
+    logs: string[];
+}
+export interface ContractCodeView extends QueryResponseKind {
+    code_base64: string;
+    hash: string;
+}
+export interface FunctionCallPermissionView {
+    FunctionCall: {
+        allowance: string;
+        receiver_id: string;
+        method_names: string[];
+    };
+}
+export interface AccessKeyViewRaw extends QueryResponseKind {
+    nonce: number;
+    permission: 'FullAccess' | FunctionCallPermissionView;
+}
+export interface AccessKeyView extends QueryResponseKind {
+    nonce: BN;
+    permission: 'FullAccess' | FunctionCallPermissionView;
+}
+export interface AccessKeyInfoView {
+    public_key: string;
+    access_key: AccessKeyView;
+}
+export interface AccessKeyList extends QueryResponseKind {
+    keys: AccessKeyInfoView[];
+}
+export interface AccessKeyInfoView {
+    public_key: string;
+    access_key: AccessKeyView;
+}
+export {};
+//# sourceMappingURL=response.d.ts.map
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/response.d.ts.map b/node_modules/near-api-js/lib/providers/response.d.ts.map
new file mode 100644
index 0000000..c6ea1ab
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/response.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"response.d.ts","sourceRoot":"","sources":["../../../../../types/src/provider/response.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/near-api-js/lib/providers/response.js b/node_modules/near-api-js/lib/providers/response.js
new file mode 100644
index 0000000..6e90dca
--- /dev/null
+++ b/node_modules/near-api-js/lib/providers/response.js
@@ -0,0 +1,19 @@
+"use strict";
+/**
+ * NEAR RPC API request types and responses
+ * @module
+ */
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.FinalExecutionStatusBasic = exports.ExecutionStatusBasic = void 0;
+var ExecutionStatusBasic;
+(function (ExecutionStatusBasic) {
+    ExecutionStatusBasic["Unknown"] = "Unknown";
+    ExecutionStatusBasic["Pending"] = "Pending";
+    ExecutionStatusBasic["Failure"] = "Failure";
+})(ExecutionStatusBasic = exports.ExecutionStatusBasic || (exports.ExecutionStatusBasic = {}));
+var FinalExecutionStatusBasic;
+(function (FinalExecutionStatusBasic) {
+    FinalExecutionStatusBasic["NotStarted"] = "NotStarted";
+    FinalExecutionStatusBasic["Started"] = "Started";
+    FinalExecutionStatusBasic["Failure"] = "Failure";
+})(FinalExecutionStatusBasic = exports.FinalExecutionStatusBasic || (exports.FinalExecutionStatusBasic = {}));
